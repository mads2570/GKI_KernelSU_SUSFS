name: Build Kernel
on:
  workflow_dispatch:
    inputs:
      BRANCH:
        description: Kernel branch
        default: 'master'
        required: true
      URL:
        description: Repository URL
        default: 'https://github.com/mads2570/android_kernel_samsung_a05m-6.6.git'
        required: true
      KSU:
        description: Add KernelSU support
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        path: rootdir
        show-progress: false
        fetch-depth: 1

    - name: Prepare dependencies
      run: |
        sudo apt update -y
        sudo apt install rsync bc cpio flex bison aptitude aria2 git python-is-python3 tar perl wget curl lz4 -y
        sudo aptitude install libssl-dev -y

    - name: Clone Kernel Source
      run: git clone --depth=1 --single-branch -b ${{ inputs.BRANCH }} ${{ inputs.URL }} A05 
         
    - name: Set CONFIG Environment Variable
      run: |
          # Set CONFIG dynamically based on inputs values
          CONFIG="${{ inputs.android_version }}-${{ inputs.kernel_version }}-${{ inputs.sub_level }}"

          # Set CONFIG as an environment variable for future steps
          echo "CONFIG=$CONFIG" >> $GITHUB_ENV  

    - name: Fetch toolchains
      working-directory: A05
      run: |
        aria2c https://github.com/rsuntkOrgs/android_kernel_samsung_a05m-6.6/releases/download/v1.0/xaa
        aria2c https://github.com/rsuntkOrgs/android_kernel_samsung_a05m-6.6/releases/download/v1.0/xab
        echo "INFO: Appending files and extracting ..."
        cat xaa xab > toolchains.tar.gz && tar -xf toolchains.tar.gz && rm toolchains.tar.gz xaa xab
        echo "INFO: Extraction operation is completed."

    - name: Prepare timezone fix
      run: |
        sudo rm /etc/localtime
        sudo ln -s /usr/share/zoneinfo/Asia/Jakarta /etc/localtime

    - name: Setup Java
      uses: actions/setup-java@v5
      with:
        distribution: temurin
        java-version: 21

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4

      
    - name: Build kernel
      id: buildKernel
      continue-on-error: true
      working-directory: A05
      run: |
          cd kernel-6.6
          curl -LSs "https://raw.githubusercontent.com/WildKernels/Wild_KSU/wild/kernel/setup.sh" | bash -s wild
          cd ..
    - name: Clone SUSFS and Patch Repos
      working-directory: A05
      run: |
        git clone https://github.com/WildKernels/AnyKernel3.git -b gki-2.0 || true
        git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-android15-6.6 || true
        git clone https://github.com/WildKernels/kernel_patches.git || true


    - name: Debug SUSFS patches and drivers directory
      working-directory: A05
      run: |
        echo "Listing A05 contents:"
        ls -l
        echo "Listing susfs4ksu and kernel_patches contents:"
        ls -l susfs4ksu/kernel_patches/ || true
        ls -l kernel_patches/ || true
        echo "Listing drivers directory:"
        ls -l drivers/ || true

    - name: Apply SUSFS Patches for KernelSU Variants
      working-directory: A05
      run: |
        # Fail if patch file is missing
        if [ ! -f susfs4ksu/kernel_patches/50_add_susfs_in_gki-android15-6.6.patch ]; then
          echo "Patch file missing: susfs4ksu/kernel_patches/50_add_susfs_in_gki-android15-6.6.patch"
          exit 1
        fi
        # Fail if drivers directory is missing
        if [ ! -d drivers ]; then
          echo "drivers/ directory not found."
          exit 127
        fi

        cp susfs4ksu/kernel_patches/50_add_susfs_in_gki-android15-6.6.patch ./kernel-6.6
        cd kernel-6.6
        patch -p1 --forward < 50_add_susfs_in_gki-android15-6.6.patch
        cd ..
        cp susfs4ksu/kernel_patches/fs/* ./kernel-6.6/fs
        cp susfs4ksu/kernel_patches/include/linux/* ./kernel-6.6/include/linux

        # Apply KSU integration patches
        cd Wild_KSU
        cp ../../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./
        patch -p1 --forward < 10_enable_susfs_for_ksu.patch || true

        # Apply compatibility fixes
        cp ../../kernel_patches/wild/susfs_fix_patches/v1.5.9/fix_core_hook.c.patch ./
        patch -p1 --forward --fuzz=3 < fix_core_hook.c.patch

        cp ../../kernel_patches/wild/susfs_fix_patches/v1.5.9/fix_rules.c.patch ./
        patch -p1 --forward < fix_rules.c.patch

        cp ../../kernel_patches/wild/susfs_fix_patches/v1.5.9/fix_sucompat.c.patch ./
        patch -p1 --forward < fix_sucompat.c.patch

        cp ../../kernel_patches/wild/susfs_fix_patches/v1.5.9/fix_kernel_compat.c.patch ./
        patch -p1 --forward < fix_kernel_compat.c.patch

    - name: Getting KernelSU Version
      working-directory: A05
      run: |
        cd kernel-6.6/Wild_KSU/kernel
        BASE_VERSION=10200
        COMMIT_COUNT=$(/usr/bin/git rev-list --count HEAD)
        KSU_VERSION=$(expr $COMMIT_COUNT + $BASE_VERSION)
        echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV

    - name: Apply Hooks Patches
      working-directory: A05
      run: |
        cp ../../kernel_patches/wild/hooks/scope_min_manual_hooks_v1.4.patch ./
        patch -p1 --forward -F 3 < scope_min_manual_hooks_v1.4.patch

    - name: Apply Hide Stuff Patches
      working-directory: A05
      run: |
        cp ../../kernel_patches/69_hide_stuff.patch ./
        patch -p1 --forward -F 3 < 69_hide_stuff.patch

    - name: Fix WiFi and Bluetooth on Samsung 6.6 GKI devices
      if: ${{ inputs.BRANCH == '6.6' }}
      working-directory: A05
      run: |
        SYMBOL_LIST=android/abi_gki_aarch64_galaxy
        echo "kdp_set_cred_non_rcu" >> $SYMBOL_LIST
        echo "kdp_usecount_dec_and_test" >> $SYMBOL_LIST
        echo "kdp_usecount_inc" >> $SYMBOL_LIST

        PATCH="../../kernel_patches/samsung/min_kdp/add-min_kdp-symbols.patch"
        if patch -p1 --dry-run < $PATCH; then
          patch -p1 --no-backup-if-mismatch < $PATCH
        fi

        cd drivers
        cp "../../../kernel_patches/samsung/min_kdp/min_kdp.c" min_kdp.c
        echo "obj-y += min_kdp.o" >> Makefile

    - name: Apply Kernel Configuration
      working-directory: A05
      run: |
        cd kernel-6.6
        defconfig="./arch/arm64/configs/gki_defconfig"

        echo "Applying kernel configurations one by one..."

        # KernelSU Core Configuration
        echo "CONFIG_KSU=y" >> "$defconfig"
        echo "CONFIG_KSU_KPROBES_HOOK=n" >> "$defconfig"

        # Mountify Support
        echo "CONFIG_TMPFS_XATTR=y" >> "$defconfig"
        echo "CONFIG_TMPFS_POSIX_ACL=y" >> "$defconfig"

        # Networking Configuration
        echo "CONFIG_IP_NF_TARGET_TTL=y" >> "$defconfig"
        echo "CONFIG_IP6_NF_TARGET_HL=y" >> "$defconfig"
        echo "CONFIG_IP6_NF_MATCH_HL=y" >> "$defconfig"

        # BBR TCP Congestion Control
        echo "CONFIG_TCP_CONG_ADVANCED=y" >> "$defconfig"
        echo "CONFIG_TCP_CONG_BBR=y" >> "$defconfig"
        echo "CONFIG_NET_SCH_FQ=y" >> "$defconfig"
        echo "CONFIG_TCP_CONG_BIC=n" >> "$defconfig"
        echo "CONFIG_TCP_CONG_WESTWOOD=n" >> "$defconfig"
        echo "CONFIG_TCP_CONG_HTCP=n" >> "$defconfig"

        # IPSet support
        echo "CONFIG_IP_SET=y" >> "$defconfig"
        echo "CONFIG_IP_SET_MAX=256" >> "$defconfig"
        echo "CONFIG_IP_SET_BITMAP_IP=y" >> "$defconfig"
        echo "CONFIG_IP_SET_BITMAP_IPMAC=y" >> "$defconfig"
        echo "CONFIG_IP_SET_BITMAP_PORT=y" >> "$defconfig"
        echo "CONFIG_IP_SET_HASH_IP=y" >> "$defconfig"
        echo "CONFIG_IP_SET_HASH_IPPORT=y" >> "$defconfig"
        echo "CONFIG_IP_SET_HASH_IPPORTIP=y" >> "$defconfig"
        echo "CONFIG_IP_SET_HASH_IPPORTNET=y" >> "$defconfig"
        echo "CONFIG_IP_SET_HASH_NET=y" >> "$defconfig"
        echo "CONFIG_IP_SET_HASH_NETNET=y" >> "$defconfig"
        echo "CONFIG_IP_SET_HASH_NETPORT=y" >> "$defconfig"
        echo "CONFIG_IP_SET_HASH_NETIFACE=y" >> "$defconfig"
        # SUSFS Configuration
        echo "CONFIG_KSU_SUSFS=y" >> "$defconfig"
        echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> "$defconfig"
        echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> "$defconfig"
        echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> "$defconfig"

        # SUSFS Auto Mount Features
        echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> "$defconfig"
        echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> "$defconfig"
        echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> "$defconfig"
        echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> "$defconfig"

        # SUSFS Advanced Features
        echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> "$defconfig"
        echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> "$defconfig"
        echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> "$defconfig"
        echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> "$defconfig"
        echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> "$defconfig"

        # SUSFS Debugging and Security
        echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> "$defconfig"
        echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> "$defconfig"
        echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$defconfig"

        # Build Optimization Configuration
        echo "CONFIG_LTO_CLANG_THIN=y" >> "$defconfig"
        echo "CONFIG_LTO_CLANG=y" >> "$defconfig"
        echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y" >> "$defconfig"
        echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3=n" >> "$defconfig"

        # Remove check_defconfig
        # sed -i 's/check_defconfig//' ./common/build.config.gki

        kernelVersion=$(make kernelversion)
        if [ -f "$(pwd)/build_kernel.sh" ]; then
          bash build_kernel.sh
        else
          exit 1
        fi
        cd out && find . -type f -name "Image.gz" && cd ..
        gitsha1=$(git rev-parse --short HEAD)
        buildDetails="$kernelVersion-A055X_${gitsha1}-$(date +'%Y%m%d%H%M%S')"
        echo "buildDetails=$buildDetails" >> $GITHUB_OUTPUT

    - name: Get commit hashes and generate commit URLs
      run: |
          GITLAB_OWNER="simonpunk"
          GITLAB_REPO="susfs4ksu"
          
          declare -A BRANCH_MAP=(
            ["gki_android15_6_6"]="gki-android15-6.6"
          )
          
          for var_name in "${!BRANCH_MAP[@]}"; do
            branch_name="${BRANCH_MAP[$var_name]}"
            COMMIT_HASH=$(git ls-remote https://gitlab.com/$GITLAB_OWNER/$GITLAB_REPO.git refs/heads/$branch_name | awk '{ print $1 }')
            
            if [[ -n "$COMMIT_HASH" ]]; then
              COMMIT_URL="https://gitlab.com/$GITLAB_OWNER/$GITLAB_REPO/-/commit/$COMMIT_HASH"
              echo "$branch_name Commit: $COMMIT_HASH"
              echo "$branch_name Commit URL: $COMMIT_URL"
              
              echo "COMMIT_HASH_${var_name}=$COMMIT_HASH" >> "$GITHUB_ENV"
              echo "COMMIT_URL_${var_name}=$COMMIT_URL" >> "$GITHUB_ENV"
            fi
          done

    - name: Get KernelSU variant refs and links
      run: |
          # Get WKSU latest commit from wild branch
          WKSU_REF=$(git ls-remote "https://github.com/WildKernels/Wild_KSU.git" refs/heads/wild | awk '{print $1}')
          WKSU_URL="https://github.com/WildKernels/Wild_KSU/commit/$WKSU_REF"
          echo "WKSU_REF=$WKSU_REF" >> $GITHUB_ENV
          echo "WKSU_URL=$WKSU_URL" >> $GITHUB_ENV

    - name: Generate and Create New Tag
      run: |
            LATEST_TAG=$(gh api repos/${{ github.repository }}/tags --jq '.[0].name')
            if [ -z "$LATEST_TAG" ]; then
              LATEST_TAG="v1.5.9-r0"
            fi
            
            NEW_TAG=$(echo "$LATEST_TAG" | awk -F'-r' '{suffix=$2; if (!suffix) suffix=0; suffix++; printf "%s-r%d", $1, suffix}')
    
            echo "New tag: $NEW_TAG"
            echo "NEW_TAG=${NEW_TAG}" >> $GITHUB_ENV

            git tag $NEW_TAG
            git push origin $NEW_TAG


    - name: Download Artifacts
      uses: actions/download-artifact@v4
      with:
          path: ./downloaded-artifacts

    - name: Set release body
      run: |
         cat << 'EOF' > release_body.md
      
          **IMPORTANT DISCLAIMER**
          This software is provided for testing and educational purposes only. Use at your own risk.
          The developers are not responsible for any damage, data loss, or issues that may occur.
          Please ensure you have proper backups before installation.
      
          Features:
          -> Wild KSU
          -> Multi Manager Support for WKSU Manager & KernelSU-Next Manager (Only Install One)
          -> SUSFS ඞ v1.5.9
          -> Scope-Minimized Manual hooks v1.4
          -> Magic Mount Support
          -> Simple Maphide for LineageOS Detections
          -> Futile Maphide for jit-zygote-cache Detections
          -> Ptrace Patch Support for Older Kernels (<5.16)
          -> IPSet Support for Advanced Network Filtering
          -> Wireguard Support
          -> BBR v1 Support
      
          Notes:
          -> SUS SU Mode 2 will show as disabled or not compatble due to non-kprobe hooks and is not needed anymore!
          -> Official Kernel Flasher is broken with latest susfs, try https://github.com/fatalcoder524/KernelFlasher/
      
          Module: 
          -> https://github.com/sidex15/ksu_module_susfs
      
          Managers:
          -> WKSU: https://t.me/Wild_Kernels/26618
          -> Next: https://github.com/KernelSU-Next/KernelSU-Next
          
          Commit Hashes (at the time of release):
          -> WKSU: [${{ env.WKSU_REF }}](${{ env.WKSU_URL }})

          -> SUSFS4KSU: 
            -> gki-android15-6.6: [${{ env.COMMIT_HASH_gki_android15_6_6 }}](${{ env.COMMIT_URL_gki_android15_6_6 }})
          EOF

    - name: Build Kernel
      run: |
       cd A05
       bash build_kernel.sh

       
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
          tag_name: ${{ env.NEW_TAG }}
          prerelease: false
          files: ""
          name: ${{ env.RELEASE_NAME }}
          body_path: release_body.md

    - name: Upload Release Assets
      run: |
          for file in ./downloaded-artifacts/*/*; do
            if [ -d "$file" ]; then
              continue
            fi
            echo "Uploading $file..."
            gh release upload ${{ env.NEW_TAG }} "$file"
          done

    - name: Display Files Uploaded
      run: |
          echo "GitHub release created with the following files:"
          ls ./downloaded-artifacts/**/*
            
    - name: Send Telegram Notification
      run: |
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -F chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -F message_thread_id="${{ secrets.TELEGRAM_TOPIC_ID_GKI }}" \
            -F text="
            🌽 *New Kernel Release Uploaded*  
            📦 *Repository:* [${{ github.repository }}](https://github.com/${{ github.repository }})  
            ✏️ *Commit:* [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})  
            [🔗 View GitHub Release](https://github.com/${{ github.repository }}/releases/tag/${{ env.NEW_TAG }})" \
            -F parse_mode="Markdown"
